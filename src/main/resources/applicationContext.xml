<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <!-- 配置数据源、邮件服务、Redis配置 -->
    <context:property-placeholder location="classpath:config.properties" ignore-unresolvable="true"/>

    <!-- 配置自动扫描包 -->
    <context:component-scan base-package="com.java.activiti.*">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- 启动@AspectJ支持 -->
    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->

	<!-- 配置数据源 -->
<!--	<bean id="dataSource"-->
<!--		class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
<!--		<property name="driverClassName" value="${jdbc.driverClass}"/>-->
<!--		<property name="url" value="${jdbc.url}"/>-->
<!--		<property name="username" value="${jdbc.username}"/>-->
<!--		<property name="password" value="${jdbc.password}"/>-->
<!--	</bean>-->
    <!-- 数据源，使用Druid -->
    <bean id="dataSource"
          class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="maxActive" value="${jdbc.maxActive}" />
        <property name="initialSize" value="${jdbc.initialSize}" />
        <property name="minIdle" value="${jdbc.minIdle}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${jdbc.maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}" />
        <!-- 配置监控统计拦截的filters,和防sql注入 -->
        <property name="filters" value="stat,wall" />
    </bean>

	<!-- 配置mybatis的sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mappers.xml文件 -->
<!--		<property name="mapperLocations" value="classpath:mappers/*.xml"></property>-->
		<property name="mapperLocations" value="classpath:mappers/*/*.xml"></property>
		<!-- mybatis配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.java.activiti.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

    <!-- 自动扫描 -->
    <context:component-scan base-package="com.java.*.service;com.java.*.*.service"/>

    <!--配置邮件接口-->
    <bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mail.smtp.host}"/>
        <property name="username" value="${mail.smtp.username}"/>
        <property name="password" value="${mail.smtp.password}"/>
        <property name="defaultEncoding" value="${mail.smtp.defaultEncoding}"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
                <prop key="mail.smtp.timeout">${mail.smtp.timeout}</prop>
            </props>
        </property>
    </bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

    <bean id="ExcelUtil" class="com.java.activiti.util.ExcelUtil">
        <constructor-arg type="java.lang.String" value="ExcelUtilConfig.xml"/>
    </bean>

	<!-- 配置事务通知属性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 定义事务传播属性 -->
        <tx:attributes>
            <tx:method name="init*" propagation="REQUIRED" />
            <tx:method name="run*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="*Update" propagation="REQUIRED"/>
            <tx:method name="edit*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="new*" propagation="REQUIRED" />
            <tx:method name="set*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="change*" propagation="REQUIRED" />
            <tx:method name="check*" propagation="REQUIRED" />
            <tx:method name="freeze*" propagation="REQUIRED" />
            <tx:method name="*Import" propagation="REQUIRED" />
            <tx:method name="*Send" propagation="REQUIRED" />
            <tx:method name="*Job" propagation="REQUIRED" />
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="load*" propagation="REQUIRED" read-only="true" />
            <tx:method name="select*" propagation="REQUIRED" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!-- 开启注解AOP -->
    <!--    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>-->
    <!-- 注解方式配置事物，为了配合自定义注解 -->
    <!--<tx:annotation-driven-->
    <!--        transaction-manager="transactionManager" proxy-target-class="true"-->
    <!--        order="200" />-->

    <!-- 配置事务切面 -->
    <aop:config>
        <aop:pointcut id="serviceOperation"
            expression="execution(* com.java.activiti.service.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
    </aop:config>


	<!-- 导入Spring配置 -->
	<import resource="classpath:activiti-context.xml"/>
    <import resource="classpath:spring-shrio.xml"/>
    <import resource="classpath:spring-aop.xml"/>
    <import resource="classpath:spring-jedis.xml"/>
    <import resource="classpath:spring-activemq.xml"/>
    <import resource="classpath:spring-netty.xml"/>
    <import resource="classpath:spring-quartz.xml"/>
    <import resource="classpath:spring-solr.xml"/>
    <import resource="classpath:spring-ureport.xml"/>
</beans>